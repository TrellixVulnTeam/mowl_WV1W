
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/graph_based/plot_1_dl2vec.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_graph_based_plot_1_dl2vec.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_graph_based_plot_1_dl2vec.py:


DL2Vec
========

This example corresponds to the paper `Predicting candidate genes from phenotypes, functions and anatomical site of expression <https://doi.org/10.1093/bioinformatics/btaa879>`_. 

This work is a graph-based machine-learning method to learn from biomedical ontologies. This method works by transforming the ontology into a graph following a set of rules. Random walks are generated from the obtained graph and then processed by a Word2Vec model, which generates 
embeddings of the original ontology classes. This algorithm is applied to generate numerical representations of genes and diseases based on the background knowledge found in the Gene Ontology, which was extended to incorporate phenotypes, functions of the gene products and anatomical location of gene expression. The representations of genes and diseases are then used to predict candidate genes for a given disease.

.. GENERATED FROM PYTHON SOURCE LINES 19-24

To show an example of DL2Vec, we need 3 components:

- The ontology projector
- The random walks generator
- The Word2Vec model

.. GENERATED FROM PYTHON SOURCE LINES 24-35

.. code-block:: default


    import mowl
    mowl.init_jvm("10g")

    from mowl.datasets.builtin import GDAHumanDataset
    from mowl.projection import DL2VecProjector
    from mowl.walking import DeepWalk
    from gensim.models.word2vec import LineSentence
    from gensim.models import Word2Vec









.. GENERATED FROM PYTHON SOURCE LINES 36-42

Projecting the ontology
-----------------------

We project the ontology using the DL2VecProjector class. The rules used to project the 
ontology can be found at :doc:`/graphs/projection`. The outcome of the projection algorithm
is an edgelist.

.. GENERATED FROM PYTHON SOURCE LINES 42-48

.. code-block:: default


    dataset = GDAHumanDataset()

    projector = DL2VecProjector(bidirectional_taxonomy=True)
    edges = projector.project(dataset.ontology)








.. GENERATED FROM PYTHON SOURCE LINES 49-54

Generating random walks
-----------------------

The random walks are generated using the DeepWalk class. This class implements the DeepWalk
algorithm with a modification consisting of including the edge labels as part of the walks.

.. GENERATED FROM PYTHON SOURCE LINES 54-63

.. code-block:: default


    walker = DeepWalk(5, # number of walks per node
                      20, # walk length
                      0.1, # restart probability
                      workers=4) # number of threads

    walks = walker.walk(edges)









.. GENERATED FROM PYTHON SOURCE LINES 64-68

Training the Word2Vec model
---------------------------

To train the Word2Vec model, we rely on the Gensim library:

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: default


    walks_file = walker.outfile
    sentences = LineSentence(walks_file)
    model = Word2Vec(sentences, vector_size=20, window=3, min_count=1, workers=4)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  54.101 seconds)


.. _sphx_glr_download_examples_graph_based_plot_1_dl2vec.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1_dl2vec.py <plot_1_dl2vec.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1_dl2vec.ipynb <plot_1_dl2vec.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

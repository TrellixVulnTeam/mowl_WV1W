
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/zsl/plot_1_deepgozero.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_zsl_plot_1_deepgozero.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_zsl_plot_1_deepgozero.py:


DeepGOZero
===========

This example corresponds to the paper `DeepGOZero: improving protein function prediction from sequence and zero-shot learning based on ontology axioms <https://doi.org/10.1093/bioinformatics/btac256>`_. DeepGOZero is a machine learning model that performs protein function prediction for functions that have small number or zero annotations.

.. GENERATED FROM PYTHON SOURCE LINES 11-12

First, we have the necesary imports for this example.

.. GENERATED FROM PYTHON SOURCE LINES 12-41

.. code-block:: default


    import click as ck
    import pandas as pd
    import torch as th
    import numpy as np
    from torch import nn
    from torch.nn import functional as F
    from torch import optim
    from torch.optim.lr_scheduler import MultiStepLR
    from sklearn.metrics import roc_curve, auc
    import math
    from mowl.utils.data import FastTensorDataLoader
    import os
    import pickle as pkl
    from tqdm import tqdm

    import mowl
    mowl.init_jvm("10g")
    from mowl.owlapi.defaults import BOT, TOP
    from mowl.datasets import ELDataset, RemoteDataset
    from mowl.models.elembeddings.module import ELEmModule
    from mowl.owlapi import OWLAPIAdapter
    from mowl.datasets.base import Entities, OWLClasses, OWLIndividuals

    from org.semanticweb.owlapi.model import AxiomType
    from org.semanticweb.owlapi.model.parameters import Imports
    from org.semanticweb.owlapi.reasoner.structural import StructuralReasonerFactory









.. GENERATED FROM PYTHON SOURCE LINES 42-47

Dataset
--------

The datasets are stored in the cloud and the following links correspond for the data for the
Gene Ontology sub-ontologies: molecular function, biological process and cellular component.

.. GENERATED FROM PYTHON SOURCE LINES 47-52

.. code-block:: default


    MF_URL = "https://deepgo.cbrc.kaust.edu.sa/data/deepgozero/mowl/molecular_function.tar.gz"
    BP_URL = "https://deepgo.cbrc.kaust.edu.sa/data/deepgozero/mowl/biological_process.tar.gz"
    CC_URL = "https://deepgo.cbrc.kaust.edu.sa/data/deepgozero/mowl/cellular_component.tar.gz"








.. GENERATED FROM PYTHON SOURCE LINES 53-61

To begin, each subontology data is encapsutaled in the ``DGZeroDataset``. This class contains \
three ontologies: training, validation and testing.
For this project, the training ontology is the Gene Ontology extended with the following axioms:

* :math:`\exists has\_function. go\_class (protein)`, which encodes protein function annotations.
* :math:`has\_interpro (protein, interpro)`, which encodes interpro features for proteins.

The validation and testing ontologies contain protein function and intepro annotations.

.. GENERATED FROM PYTHON SOURCE LINES 61-175

.. code-block:: default


    class DGZeroDataset(RemoteDataset):
        def __init__(self, subontology):
            if subontology == "mf":
                url = MF_URL
                root = "molecular_function/"
            elif subontology == "bp":
                url = BP_URL
                root = "biological_process/"
            elif subontology == "cc":
                url = CC_URL
                root = "cellular_component/"
            else:
                raise ValueError("Invalid subontology: {}".format(subontology))

            train_owl_file = root + "mowl_train.owl"
            valid_owl_file = root + "mowl_valid.owl"
            test_owl_file = root + "mowl_test.owl"

            super().__init__(url)
        
            self._proteins = None
            self._functions = None
            self._interpros = None
        
        @property
        def functions(self):
            if self._functions is None:
                functions = set()
                for cls_str, cls_owl in self.classes.as_dict.items():
                    if cls_str.startswith("http://purl.obolibrary.org/obo/GO"):
                        functions.add(cls_owl)
                self._functions = OWLClasses(functions)
            return self._functions

        @property
        def proteins(self):
            if self._proteins is None:
                proteins = set()
                for ind_str, ind_owl in self.individuals.as_dict.items():
                    if ind_str.startswith("http://mowl/protein"):
                        proteins.add(ind_owl)
                self._proteins = OWLIndividuals(proteins)
            return self._proteins

        @property
        def interpros(self):
            if self._interpros is None:
                interpros = set()
                for ind_str, ind_owl in self.individuals.as_dict.items():
                    if ind_str.startswith("http://mowl/interpro"):
                        interpros.add(ind_owl)
                self._interpros = OWLIndividuals(interpros)
            return self._interpros
    

        @property
        def evaluation_property(self):
            return "http://mowl/has_function"



    def load_data(dataset, term_to_id, ipr_to_id):
        train_data = get_data(dataset.ontology, term_to_id, ipr_to_id)
        valid_data = get_data(dataset.validation, term_to_id, ipr_to_id)
        test_data  = get_data(dataset.testing, term_to_id, ipr_to_id)
    
        return train_data, valid_data, test_data

    def get_data(ontology, term_to_id, ipr_to_id):
        axioms = ontology.getABoxAxioms(Imports.fromBoolean(False))
    
        pf_axioms = set()
        interpro_axioms = set()
    
        for abox_axiom in axioms:
            ax_name = abox_axiom.getAxiomType()
        
            if ax_name == AxiomType.CLASS_ASSERTION:
                pf_axioms.add(abox_axiom)
            elif ax_name == AxiomType.OBJECT_PROPERTY_ASSERTION:
                interpro_axioms.add(abox_axiom)
            else:
                print(f"Ignoring axiom: {abox_axiom.toString()}")
    
        individuals = ontology.getIndividualsInSignature()
        proteins = [str(i.toStringID()) for i in individuals if str(i.toStringID()).startswith("http://mowl/protein/")]
        proteins = sorted(proteins)
        prot_to_id = {p: i for i, p in enumerate(proteins)}

        data = th.zeros((len(proteins), len(ipr_to_id)), dtype=th.float32)
        labels = th.zeros((len(proteins), len(term_to_id)), dtype=th.float32)
    
        interpro_count = 0
        function_count = 0
        for axiom in interpro_axioms:
            protein = str(axiom.getSubject().toStringID())
            interpro = str(axiom.getObject().toStringID())
        
            if interpro in ipr_to_id:
                data[prot_to_id[protein], ipr_to_id[interpro]] = 1
                interpro_count += 1

        for axiom in pf_axioms:
            protein = str(axiom.getIndividual().toStringID())
            function = str(axiom.getClassExpression().getFiller().toStringID())
        
            if function in term_to_id:
                labels[prot_to_id[protein], term_to_id[function]] = 1
                function_count += 1
    
        print(f"In get_data. Interpros processed: {interpro_count}. Functions processed: {function_count}")
        return data, labels








.. GENERATED FROM PYTHON SOURCE LINES 176-183

DeepGoZero model
----------------

The DeepGoZero model is composed by:
- A protein encoder model that takes protein interpro features and learns a latent \
representation of the protein. Futhermore, this representation is associated to a GO term \
to predict if the GO term is a function of the protein.

.. GENERATED FROM PYTHON SOURCE LINES 183-212

.. code-block:: default


    class Residual(nn.Module):

        def __init__(self, fn):
            super().__init__()
            self.fn = fn

        def forward(self, x):
            return x + self.fn(x)
    
        
    class MLPBlock(nn.Module):

        def __init__(self, in_features, out_features, bias=True, layer_norm=True, dropout=0.1, activation=nn.ReLU):
            super().__init__()
            self.linear = nn.Linear(in_features, out_features, bias)
            self.activation = activation()
            self.layer_norm = nn.BatchNorm1d(out_features) if layer_norm else None
            self.dropout = nn.Dropout(dropout) if dropout else None

        def forward(self, x):
            x = self.activation(self.linear(x))
            if self.layer_norm:
                x = self.layer_norm(x)
            if self.dropout:
                x = self.dropout(x)
            return x









.. GENERATED FROM PYTHON SOURCE LINES 213-216

The GO terms representations are learned using a model theoretic approach called
:doc:`ELEmbeddings </examples/elmodels/plot_1_elembeddings>`. ELEmbeddings processes the axioms
of the Gene Ontology and learns a representation of the GO terms.

.. GENERATED FROM PYTHON SOURCE LINES 216-288

.. code-block:: default

    
    class DGELModel(nn.Module):

        def __init__(self, nb_iprs, nb_gos, nb_zero_gos, nb_rels, device, hidden_dim=1024, embed_dim=1024, margin=0.1):
            super().__init__()
            self.nb_gos = nb_gos
            self.nb_zero_gos = nb_zero_gos
            input_length = nb_iprs
            net = []
            net.append(MLPBlock(input_length, hidden_dim))
            net.append(Residual(MLPBlock(hidden_dim, hidden_dim)))
            self.net = nn.Sequential(*net)

            # ELEmbeddings
            self.embed_dim = embed_dim
            self.hasFuncIndex = th.LongTensor([nb_rels]).to(device)
            go_embed = nn.Embedding(nb_gos + nb_zero_gos+2, embed_dim)
            #self.go_norm = nn.BatchNorm1d(embed_dim)
            k = math.sqrt(1 / embed_dim)
            nn.init.uniform_(go_embed.weight, -k, k)
            go_rad = nn.Embedding(nb_gos + nb_zero_gos, 1)
            nn.init.uniform_(go_rad.weight, -k, k)
        
            rel_embed = nn.Embedding(nb_rels + 1, embed_dim)
            nn.init.uniform_(rel_embed.weight, -k, k)
            self.all_gos = th.arange(self.nb_gos).to(device)
            self.margin = margin

            self.elembeddings = ELEmModule(nb_gos + nb_zero_gos + 2, nb_rels+1, embed_dim=embed_dim) # +2 to add top and bottom
            self.elembeddings.class_embed = go_embed
            self.elembeddings.class_rad = go_rad
            self.elembeddings.rel_embed = rel_embed
        
     
        def forward(self, features, data = None):
            if data is None:
                data = self.all_gos

            class_embed = self.elembeddings.class_embed
            rel_embed = self.elembeddings.rel_embed
            class_rad = self.elembeddings.class_rad
            x = self.net(features)
            go_embed = class_embed(data)
            hasFunc = rel_embed(self.hasFuncIndex)
            hasFuncGO = go_embed + hasFunc
            go_rad = th.abs(class_rad(data).view(1, -1))
            x = th.matmul(x, hasFuncGO.T) + go_rad
            logits = th.sigmoid(x)
            return logits

        def predict_zero(self, features, data):
            return self.forward(features, data=data)
    
        def el_loss(self, go_normal_forms):
            gci0, gci1, gci2, gci3 = go_normal_forms
        
            gci0_loss = self.elembeddings(gci0, "gci0")
            gci1_loss = self.elembeddings(gci1, "gci1")
            gci2_loss = self.elembeddings(gci2, "gci2")
            gci3_loss = self.elembeddings(gci3, "gci3")
            return gci0_loss.mean() + gci1_loss.mean() + gci2_loss.mean() + gci3_loss.mean()

    

    def compute_roc(labels, preds):
        # Compute ROC curve and ROC area for each class
        fpr, tpr, _ = roc_curve(labels.flatten(), preds.flatten())
        roc_auc = auc(fpr, tpr)

        return roc_auc









.. GENERATED FROM PYTHON SOURCE LINES 289-301

Training DeepGoZero
-------------------

In the training phase, both the protein and GO term model are trained jointly. In the model, the
objective function is composed by two terms:
- The first term is the cross entropy loss between the predicted GO term and the true GO term
for a protein
- The second term is the ELEmbeddings loss that is computed using the axioms of the Gene Ontology

Not all the GO terms are present in the first component, but only on the second component.
However, DeepGOZero is able to predict protein functions that do not have annotations by
leveraging the semantics of the Gene Ontology.

.. GENERATED FROM PYTHON SOURCE LINES 301-537

.. code-block:: default


    def main(ont, batch_size, epochs, device):

        if not os.path.exists(f"data/{ont}"):
            os.makedirs(f"data/{ont}")
    
        print("Loading DeepGOZero dataset...")
        dataset = DGZeroDataset(ont)
    
        model_file = f'data/{ont}/deepgozero_zero_10.th'
        terms_file = str(dataset.root) + '/terms_zero_10.pkl'
        iprs_file = str(dataset.root) + '/interpros.pkl'
        out_file = str(dataset.root) + '/predictions_deepgozero_zero_10.pkl'

        functions = dataset.functions.as_str
        function_to_id = {f: i for i,f in enumerate(functions)}

        proteins = dataset.proteins.as_str
        protein_to_id = {p: i for i, p in enumerate(proteins)}

        interpros = dataset.interpros.as_str
        interpro_to_id = {ip: i for i, ip in enumerate(interpros)}

        relations = dataset.object_properties.as_str
        relation_to_id = {r: i for i, r in enumerate(relations) if r != "http://mowl/has_function"}

        print(f"Functions:\t{len(functions)}")
        print(f"Proteins: \t{len(proteins)}")
        print(f"Interpros:\t{len(interpros)}")
        print(f"Relations:\t{len(relations)}")


        # List of GO terms to be used
        terms_df = pd.read_pickle(terms_file)
        terms = terms_df['gos'].values.flatten()
        terms = ["http://purl.obolibrary.org/obo/" + t.replace(":", "_") for t in terms]
        term_to_id = {t: i for i, t in enumerate(terms)}
        n_terms = len(terms)
    
        # List of Interpros to be used
        ipr_df = pd.read_pickle(iprs_file)
        iprs = ipr_df['interpros'].values.flatten()
        iprs = ["http://mowl/interpro/" + i for i in iprs]
        ipr_to_id = {v:k for k, v in enumerate(iprs)}
        n_interpros = len(iprs)
    
        print(f"GO terms list: {n_terms}")
        print(f"Interpro list: {n_interpros}")


        z_count = 0
        z_functions = set()
        for function in functions:
            if not function in terms:
                z_functions.add(function)
                z_count += 1

        print(f'Non-zero functions:\t{n_terms}\nZero functions: \t{z_count}')

 

        zero_functions = {t: i + len(terms) for i, t in enumerate(z_functions)}
        class_to_id = {**term_to_id,  **zero_functions}
        class_to_id[BOT] = len(class_to_id)
        class_to_id[TOP] = len(class_to_id)

        # Protein function data
        train_data, valid_data, test_data = load_data(dataset, term_to_id, ipr_to_id)

        # GO data as EL
        nfs_file = f"data/{ont}/nfs.pkl"
        if os.path.exists(nfs_file):
            print("Loading normal forms from disk...")
            with open(nfs_file, "rb") as f:
                nfs = pkl.load(f)
                gci0_ds, gci1_ds, gci2_ds, gci3_ds = nfs
        else:
            print("Generating EL dataset...")
            el_dataset = ELDataset(dataset.ontology, 
                                   class_index_dict=class_to_id,
                                   object_property_index_dict=relation_to_id, 
                                   extended=False)

            nfs = el_dataset.get_gci_datasets()    
            with open(nfs_file, "wb") as f:
                pkl.dump(nfs, f)

        gci0_ds = nfs["gci0"]
        gci1_ds = nfs["gci1"]
        gci2_ds = nfs["gci2"]
        gci3_ds = nfs["gci3"]
        print(f"Axioms in GCI0: {len(gci0_ds)}")
        print(f"Axioms in GCI1: {len(gci1_ds)}")
        print(f"Axioms in GCI2: {len(gci2_ds)}")
        print(f"Axioms in GCI3: {len(gci3_ds)}")

        nfs = list(nfs.values())

        n_rels = len(relation_to_id)
        n_zeros = len(zero_functions)

        net = DGELModel(n_interpros, n_terms, n_zeros, n_rels, device).to(device)
        print(net)

        train_features, train_labels = train_data
        valid_features, valid_labels = valid_data
        test_features, test_labels = test_data

        train_loader = FastTensorDataLoader(
            *train_data, batch_size=batch_size, shuffle=True)
        valid_loader = FastTensorDataLoader(
            *valid_data, batch_size=batch_size, shuffle=False)
        test_loader = FastTensorDataLoader(
            *test_data, batch_size=batch_size, shuffle=False)

        valid_labels = valid_labels.detach().cpu().numpy()
        test_labels = test_labels.detach().cpu().numpy()

        optimizer = th.optim.Adam(net.parameters(), lr=5e-4)
        scheduler = MultiStepLR(optimizer, milestones=[5, 20], gamma=0.1)

        best_loss = 10000.0
    
        print('Training the model')
        for epoch in range(epochs):
            net.train()
            train_loss = 0
            train_elloss = 0
            lmbda = 0.1
            train_steps = 2 # int(math.ceil(len(train_labels) / batch_size))

            count = 0
            for batch_features, batch_labels in tqdm(train_loader, total=train_steps):
                if count == train_steps:
                    break
                count += 1
                batch_features = batch_features.to(device)
                batch_labels = batch_labels.to(device)
                logits = net(batch_features)
                loss = F.binary_cross_entropy(logits, batch_labels)
                el_loss = net.el_loss(nfs)
                total_loss = loss + el_loss
                train_loss += loss.detach().item()
                train_elloss = el_loss.detach().item()
                optimizer.zero_grad()
                total_loss.backward()
                optimizer.step()

            train_loss /= train_steps

            print('Validation')
            net.eval()
            with th.no_grad():
                valid_steps = int(math.ceil(len(valid_labels) / batch_size))
                valid_loss = 0
                preds = []

                for batch_features, batch_labels in tqdm(valid_loader, total=valid_steps):
                    batch_features = batch_features.to(device)
                    batch_labels = batch_labels.to(device)
                    logits = net(batch_features)
                    batch_loss = F.binary_cross_entropy(logits, batch_labels)
                    valid_loss += batch_loss.detach().item()
                    preds = np.append(preds, logits.detach().cpu().numpy())
                valid_loss /= valid_steps
                roc_auc = compute_roc(valid_labels, preds)
                print(f'Epoch {epoch}: Loss - {train_loss}, EL Loss: {train_elloss}, Valid loss - {valid_loss}, AUC - {roc_auc}')

            print('EL Loss', train_elloss)
            if valid_loss < best_loss:
                best_loss = valid_loss
                print('Saving model')
                th.save(net.state_dict(), model_file)

            scheduler.step()


        # Loading best model
        print('Loading the best model')
        net.load_state_dict(th.load(model_file))
        net.eval()
        with th.no_grad():
            test_steps = int(math.ceil(len(test_labels) / batch_size))
            test_loss = 0
            preds = []
        
            for batch_features, batch_labels in tqdm(test_loader, total=test_steps):
                batch_features = batch_features.to(device)
                batch_labels = batch_labels.to(device)
                logits = net(batch_features)
                batch_loss = F.binary_cross_entropy(logits, batch_labels)
                test_loss += batch_loss.detach().cpu().item()
                preds = np.append(preds, logits.detach().cpu().numpy())
            test_loss /= test_steps
            preds = preds.reshape(-1, n_terms)
            roc_auc = compute_roc(test_labels, preds)
            print(f'Test Loss - {test_loss}, AUC - {roc_auc}')

        preds = list(preds)


        adapter = OWLAPIAdapter()
        manager = adapter.owl_manager

        # Propagate scores using ontology structure


        reasoner = StructuralReasonerFactory().createReasoner(dataset.ontology)

    

        for i, scores in tqdm(enumerate(preds[:10]), total=len(preds[:10])):
            prop_annots = {}
            sup_processed = 0
            for go_id, j in term_to_id.items():
                score = scores[j]
                go_class = adapter.create_class(go_id)
                superclasses = reasoner.getSuperClasses(go_class, False).getFlattened()
                superclasses = [str(sup.toStringID()) for sup in superclasses]
                for sup_go in superclasses:
                    if sup_go in prop_annots:
                        prop_annots[sup_go] = max(prop_annots[sup_go], score)
                        sup_processed += 1
                    else:
                        prop_annots[sup_go] = score
            for go_id, score in prop_annots.items():
                if go_id in term_to_id:
                    scores[term_to_id[go_id]] = score



        # TODO: refactor this to save predictions in an .owl file
        # test_df['preds'] = preds
        # test_df.to_pickle(out_file)









.. GENERATED FROM PYTHON SOURCE LINES 538-540

Training the model
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 540-547

.. code-block:: default



    ont = "mf"
    batch_size = 16
    epochs = 2
    device = "cpu"
    main(ont, batch_size, epochs, device)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Loading DeepGOZero dataset...
    Functions:      50722
    Proteins:       43279
    Interpros:      21579
    Relations:      11
    GO terms list: 2041
    Interpro list: 26406
    Non-zero functions:     2041
    Zero functions:         48681
    In get_data. Interpros processed: 153955. Functions processed: 364571
    In get_data. Interpros processed: 17956. Functions processed: 40176
    In get_data. Interpros processed: 21084. Functions processed: 51317
    Loading normal forms from disk...
    Axioms in GCI0: 80941
    Axioms in GCI1: 11842
    Axioms in GCI2: 19594
    Axioms in GCI3: 11810
    DGELModel(
      (net): Sequential(
        (0): MLPBlock(
          (linear): Linear(in_features=26406, out_features=1024, bias=True)
          (activation): ReLU()
          (layer_norm): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (dropout): Dropout(p=0.1, inplace=False)
        )
        (1): Residual(
          (fn): MLPBlock(
            (linear): Linear(in_features=1024, out_features=1024, bias=True)
            (activation): ReLU()
            (layer_norm): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
      (elembeddings): ELEmModule(
        (class_embed): Embedding(50724, 1024)
        (class_rad): Embedding(50722, 1)
        (rel_embed): Embedding(11, 1024)
      )
    )
    Training the model
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:01<00:01,  1.69s/it]    100%|##########| 2/2 [00:03<00:00,  1.53s/it]    100%|##########| 2/2 [00:03<00:00,  1.56s/it]
    Validation
      0%|          | 0/241 [00:00<?, ?it/s]      6%|6         | 15/241 [00:00<00:01, 147.36it/s]     12%|#2        | 30/241 [00:00<00:01, 141.17it/s]     19%|#8        | 45/241 [00:00<00:01, 133.52it/s]     24%|##4       | 59/241 [00:00<00:03, 48.93it/s]      29%|##8       | 69/241 [00:01<00:03, 56.66it/s]     33%|###2      | 79/241 [00:01<00:02, 61.98it/s]     37%|###6      | 88/241 [00:01<00:02, 65.51it/s]     40%|####      | 97/241 [00:01<00:02, 67.74it/s]     44%|####3     | 106/241 [00:01<00:01, 68.42it/s]     47%|####7     | 114/241 [00:01<00:01, 68.38it/s]     51%|#####     | 122/241 [00:01<00:01, 67.60it/s]     54%|#####3    | 130/241 [00:01<00:01, 66.50it/s]     57%|#####6    | 137/241 [00:01<00:01, 65.07it/s]     60%|#####9    | 144/241 [00:02<00:01, 63.39it/s]     63%|######2   | 151/241 [00:02<00:01, 61.92it/s]     66%|######5   | 158/241 [00:02<00:01, 60.35it/s]     68%|######8   | 165/241 [00:02<00:01, 58.81it/s]     71%|#######   | 171/241 [00:02<00:01, 57.69it/s]     73%|#######3  | 177/241 [00:02<00:01, 56.39it/s]     76%|#######5  | 183/241 [00:02<00:01, 55.11it/s]     78%|#######8  | 189/241 [00:02<00:00, 53.89it/s]     81%|########  | 195/241 [00:03<00:00, 52.73it/s]     83%|########3 | 201/241 [00:03<00:00, 51.63it/s]     86%|########5 | 207/241 [00:03<00:00, 50.66it/s]     88%|########8 | 213/241 [00:03<00:00, 49.61it/s]     90%|######### | 218/241 [00:03<00:00, 48.86it/s]     93%|#########2| 223/241 [00:03<00:00, 47.96it/s]     95%|#########4| 228/241 [00:03<00:00, 47.26it/s]     97%|#########6| 233/241 [00:03<00:00, 46.48it/s]     99%|#########8| 238/241 [00:03<00:00, 45.72it/s]    100%|##########| 241/241 [00:04<00:00, 59.58it/s]
    Epoch 0: Loss - 0.8770045340061188, EL Loss: 8.328847885131836, Valid loss - 0.6778980980770222, AUC - 0.5337552115308145
    EL Loss 8.328847885131836
    Saving model
      0%|          | 0/2 [00:00<?, ?it/s]     50%|#####     | 1/2 [00:01<00:01,  1.67s/it]    100%|##########| 2/2 [00:02<00:00,  1.40s/it]    100%|##########| 2/2 [00:02<00:00,  1.44s/it]
    Validation
      0%|          | 0/241 [00:00<?, ?it/s]      6%|6         | 15/241 [00:00<00:01, 145.79it/s]     12%|#2        | 30/241 [00:00<00:01, 141.08it/s]     19%|#8        | 45/241 [00:00<00:01, 135.05it/s]     24%|##4       | 59/241 [00:00<00:01, 128.28it/s]     30%|##9       | 72/241 [00:00<00:01, 124.39it/s]     35%|###5      | 85/241 [00:00<00:01, 118.84it/s]     40%|####      | 97/241 [00:00<00:01, 114.41it/s]     45%|####5     | 109/241 [00:00<00:01, 110.63it/s]     50%|#####     | 121/241 [00:01<00:01, 106.83it/s]     55%|#####4    | 132/241 [00:01<00:01, 96.37it/s]      59%|#####8    | 142/241 [00:01<00:01, 82.99it/s]     63%|######2   | 151/241 [00:01<00:01, 74.44it/s]     66%|######5   | 159/241 [00:01<00:01, 68.90it/s]     69%|######9   | 167/241 [00:01<00:01, 64.44it/s]     72%|#######2  | 174/241 [00:01<00:01, 61.17it/s]     75%|#######5  | 181/241 [00:02<00:01, 58.40it/s]     78%|#######7  | 187/241 [00:02<00:00, 56.37it/s]     80%|########  | 193/241 [00:02<00:00, 54.31it/s]     83%|########2 | 199/241 [00:02<00:00, 52.76it/s]     85%|########5 | 205/241 [00:02<00:00, 51.34it/s]     88%|########7 | 211/241 [00:02<00:00, 49.87it/s]     90%|########9 | 216/241 [00:02<00:00, 48.93it/s]     92%|#########1| 221/241 [00:02<00:00, 47.78it/s]     94%|#########3| 226/241 [00:03<00:00, 46.95it/s]     96%|#########5| 231/241 [00:03<00:00, 46.03it/s]     98%|#########7| 236/241 [00:03<00:00, 45.17it/s]    100%|##########| 241/241 [00:03<00:00, 44.00it/s]    100%|##########| 241/241 [00:03<00:00, 71.91it/s]
    Epoch 1: Loss - 0.849672257900238, EL Loss: 8.187187194824219, Valid loss - 0.6497969093164467, AUC - 0.5321969504042624
    EL Loss 8.187187194824219
    Saving model
    Loading the best model
      0%|          | 0/295 [00:00<?, ?it/s]      5%|4         | 14/295 [00:00<00:02, 129.88it/s]      9%|9         | 28/295 [00:00<00:02, 132.68it/s]     14%|#4        | 42/295 [00:00<00:01, 131.15it/s]     19%|#8        | 56/295 [00:00<00:01, 125.06it/s]     23%|##3       | 69/295 [00:00<00:01, 120.34it/s]     28%|##7       | 82/295 [00:00<00:01, 117.48it/s]     32%|###1      | 94/295 [00:00<00:01, 114.17it/s]     36%|###5      | 106/295 [00:00<00:01, 107.21it/s]     40%|###9      | 117/295 [00:01<00:01, 101.70it/s]     43%|####3     | 128/295 [00:01<00:01, 95.58it/s]      47%|####6     | 138/295 [00:01<00:01, 85.98it/s]     50%|####9     | 147/295 [00:01<00:01, 76.91it/s]     53%|#####2    | 155/295 [00:01<00:01, 71.58it/s]     55%|#####5    | 163/295 [00:01<00:01, 69.37it/s]     58%|#####7    | 171/295 [00:01<00:01, 67.18it/s]     60%|######    | 178/295 [00:01<00:01, 62.25it/s]     63%|######2   | 185/295 [00:02<00:01, 58.84it/s]     65%|######4   | 191/295 [00:02<00:01, 56.48it/s]     67%|######6   | 197/295 [00:02<00:01, 54.17it/s]     69%|######8   | 203/295 [00:02<00:01, 52.46it/s]     71%|#######   | 209/295 [00:02<00:01, 50.86it/s]     73%|#######2  | 215/295 [00:02<00:01, 49.48it/s]     75%|#######4  | 220/295 [00:02<00:01, 48.36it/s]     76%|#######6  | 225/295 [00:02<00:01, 47.31it/s]     78%|#######7  | 230/295 [00:03<00:01, 46.37it/s]     80%|#######9  | 235/295 [00:03<00:01, 45.58it/s]     81%|########1 | 240/295 [00:03<00:01, 44.60it/s]     83%|########3 | 245/295 [00:03<00:01, 43.83it/s]     85%|########4 | 250/295 [00:03<00:01, 43.09it/s]     86%|########6 | 255/295 [00:03<00:00, 42.42it/s]     88%|########8 | 260/295 [00:03<00:00, 41.58it/s]     90%|########9 | 265/295 [00:03<00:00, 41.03it/s]     92%|#########1| 270/295 [00:04<00:00, 40.46it/s]     93%|#########3| 275/295 [00:04<00:00, 40.05it/s]     95%|#########4| 280/295 [00:04<00:00, 39.56it/s]     96%|#########6| 284/295 [00:04<00:00, 39.06it/s]     98%|#########7| 288/295 [00:04<00:00, 38.62it/s]     99%|#########8| 292/295 [00:04<00:00, 38.22it/s]    100%|##########| 295/295 [00:04<00:00, 62.45it/s]
    Test Loss - 0.6505911311860811, AUC - 0.5383289186069935
      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:00<00:01,  6.15it/s]     20%|##        | 2/10 [00:00<00:01,  6.51it/s]     30%|###       | 3/10 [00:00<00:01,  6.71it/s]     40%|####      | 4/10 [00:00<00:00,  6.81it/s]     50%|#####     | 5/10 [00:00<00:00,  6.87it/s]     60%|######    | 6/10 [00:00<00:00,  6.92it/s]     70%|#######   | 7/10 [00:01<00:00,  6.95it/s]     80%|########  | 8/10 [00:01<00:00,  6.98it/s]     90%|######### | 9/10 [00:01<00:00,  5.54it/s]    100%|##########| 10/10 [00:01<00:00,  5.92it/s]    100%|##########| 10/10 [00:01<00:00,  6.36it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  55.179 seconds)

**Estimated memory usage:**  15299 MB


.. _sphx_glr_download_examples_zsl_plot_1_deepgozero.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_1_deepgozero.py <plot_1_deepgozero.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_1_deepgozero.ipynb <plot_1_deepgozero.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
